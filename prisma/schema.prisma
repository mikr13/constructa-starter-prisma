// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/db/generated"
  engineType = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth Models (generated by @better-auth/cli)
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  documents     Document[]
}

model Session {
  id                     String    @id @default(cuid())
  expiresAt              DateTime
  token                  String    @unique
  createdAt              DateTime
  updatedAt              DateTime
  ipAddress              String?
  userAgent              String?
  userId                 String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                     String    @id @default(cuid())
  accountId              String
  providerId             String
  userId                 String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime
  updatedAt              DateTime
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("verification")
}

// Application Models
model Profile {
  id                    String     @id @default(cuid())
  username              String?    @unique
  email                 String?
  avatar                String?
  phone                 String?
  firstName             String?
  lastName              String?
  fullName              String?
  isOnboarded           Boolean    @default(false) @map("isOnboardingComplete")
  emailVerifiedAt       DateTime? @map("email_verified_at")
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
  accessedAt            DateTime   @default(now()) @map("accessed_at")

  // Relations
  user                  User       @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("profile")
}

model File {
  id        String   @id @default(cuid())
  clientId  String   @default("local") @map("client_id")
  key       String   @unique
  mimeType  String?  @map("mime_type")
  fileType  String   @map("file_type")
  name      String
  size      Int
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  accessedAt DateTime @default(now()) @map("accessed_at")

  // Relations
  documents      Document[]
  documentChunks DocumentChunk[]

  @@map("files")
}

model Document {
  id              String    @id @default(cuid())
  title           String
  content         String
  fileType        String?   @map("file_type")
  filename        String?
  totalCharCount  Int?      @map("total_char_count")
  totalLineCount  Int?      @map("total_line_count")
  sourceType      String    @map("source_type")
  source          String?
  fileId          String?   @map("file_id")
  userId          String    @map("user_id")
  clientId        String    @default("local") @map("client_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  accessedAt      DateTime  @default(now()) @map("accessed_at")

  // Relations
  file            File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentChunks  DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id         String    @id @default(cuid())
  fileId     String    @map("file_id")
  chunkIndex Int       @map("chunk_index")
  text       String
  // Note: embedding field will be handled via raw SQL due to pgvector limitations
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  accessedAt DateTime  @default(now()) @map("accessed_at")

  // Relations
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
  Document Document[]
}
